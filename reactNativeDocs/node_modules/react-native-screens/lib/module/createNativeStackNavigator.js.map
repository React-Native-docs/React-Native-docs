{"version":3,"sources":["createNativeStackNavigator.js"],"names":["React","Platform","StyleSheet","Screen","ScreenStack","ScreenStackHeaderBackButtonImage","ScreenStackHeaderCenterView","ScreenStackHeaderConfig","ScreenStackHeaderLeftView","ScreenStackHeaderRightView","createNavigator","SceneView","StackActions","StackRouter","HeaderBackButton","renderComponentOrThunk","componentOrThunk","props","REMOVE_ACTION","StackView","Component","route","navigation","dispatch","type","immediate","key","descriptor","options","onAppear","completeTransition","toChildKey","state","routes","lastRoute","length","index","navigationConfig","headerMode","backButtonInCustomView","direction","headerBackTitle","headerBackTitleStyle","headerBackTitleVisible","headerHideBackButton","headerLargeStyle","headerLargeTitleStyle","headerStyle","headerTintColor","headerTitleStyle","headerTopInsetEnabled","hideShadow","largeTitle","largeTitleHideShadow","screenOrientation","statusBarAnimation","statusBarHidden","statusBarStyle","title","translucent","scene","headerOptions","backTitle","backTitleFontFamily","fontFamily","backTitleFontSize","fontSize","color","topInsetEnabled","hideBackButton","largeTitleBackgroundColor","backgroundColor","largeTitleColor","largeTitleFontFamily","largeTitleFontSize","largeTitleFontWeight","fontWeight","titleColor","titleFontFamily","titleFontSize","titleFontWeight","undefined","hasHeader","header","blurEffect","children","backButtonImage","push","headerLeft","headerBackImage","goBack","requestAnimationFrame","headerPressColorAndroid","backButtonTitle","truncatedBackButtonTitle","backTitleVisible","layoutPreset","headerTitle","headerRight","getComponent","mode","transparentCard","SceneComponent","stackPresentation","cardTransparent","stackAnimation","animationEnabled","screenProps","absoluteFill","cardStyle","replaceAnimation","OS","gestureEnabled","_onAppear","_removeScene","_renderHeaderConfig","render","descriptors","styles","scenes","_onFinishTransitioning","map","i","_renderScene","create","flex","createStackNavigator","routeConfigMap","stackConfig","router","superGetStateForAction","getStateForAction","action","backRouteIndex","backRoute","find","indexOf","newRoutes","splice","isTransitioning"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport {\n  Screen,\n  ScreenStack,\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n} from 'react-native-screens';\nimport {\n  createNavigator,\n  SceneView,\n  StackActions,\n  StackRouter,\n} from 'react-navigation';\nimport { HeaderBackButton } from 'react-navigation-stack';\n\nfunction renderComponentOrThunk(componentOrThunk, props) {\n  if (typeof componentOrThunk === 'function') {\n    return componentOrThunk(props);\n  }\n  return componentOrThunk;\n}\n\nconst REMOVE_ACTION = 'NativeStackNavigator/REMOVE';\n\nclass StackView extends React.Component {\n  _removeScene = (route) => {\n    this.props.navigation.dispatch({\n      type: REMOVE_ACTION,\n      immediate: true,\n      key: route.key,\n    });\n  };\n\n  _onAppear = (route, descriptor) => {\n    descriptor.options &&\n      descriptor.options.onAppear &&\n      descriptor.options.onAppear();\n    this.props.navigation.dispatch(\n      StackActions.completeTransition({\n        toChildKey: route.key,\n        key: this.props.navigation.state.key,\n      })\n    );\n  };\n\n  _onFinishTransitioning = () => {\n    const { routes } = this.props.navigation.state;\n    const lastRoute = routes?.length && routes[routes.length - 1];\n\n    if (lastRoute) {\n      this.props.navigation.dispatch(\n        StackActions.completeTransition({\n          toChildKey: lastRoute.key,\n          key: this.props.navigation.state.key,\n        })\n      );\n    }\n  };\n\n  _renderHeaderConfig = (index, route, descriptor) => {\n    const { navigationConfig } = this.props;\n    const { options } = descriptor;\n    const { headerMode } = navigationConfig;\n\n    const {\n      backButtonInCustomView,\n      direction,\n      headerBackTitle,\n      headerBackTitleStyle,\n      headerBackTitleVisible,\n      headerHideBackButton,\n      headerLargeStyle,\n      headerLargeTitleStyle,\n      headerStyle,\n      headerTintColor,\n      headerTitleStyle,\n      headerTopInsetEnabled = true,\n      hideShadow,\n      largeTitle,\n      largeTitleHideShadow,\n      screenOrientation,\n      statusBarAnimation,\n      statusBarHidden,\n      statusBarStyle,\n      title,\n      translucent,\n    } = options;\n\n    const scene = {\n      index,\n      key: route.key,\n      route,\n      descriptor,\n    };\n\n    const headerOptions = {\n      backButtonInCustomView,\n      backTitle: headerBackTitleVisible === false ? '' : headerBackTitle,\n      backTitleFontFamily:\n        headerBackTitleStyle && headerBackTitleStyle.fontFamily,\n      backTitleFontSize: headerBackTitleStyle && headerBackTitleStyle.fontSize,\n      color: headerTintColor,\n      direction,\n      topInsetEnabled: headerTopInsetEnabled,\n      hideBackButton: headerHideBackButton,\n      hideShadow,\n      largeTitle,\n      largeTitleBackgroundColor:\n        (headerLargeStyle && headerLargeStyle.backgroundColor) ||\n        (headerLargeTitleStyle && headerLargeTitleStyle.backgroundColor),\n      largeTitleColor: headerLargeTitleStyle && headerLargeTitleStyle.color,\n      largeTitleFontFamily:\n        headerLargeTitleStyle && headerLargeTitleStyle.fontFamily,\n      largeTitleFontSize:\n        headerLargeTitleStyle && headerLargeTitleStyle.fontSize,\n      largeTitleFontWeight:\n        headerLargeTitleStyle && headerLargeTitleStyle.fontWeight,\n      largeTitleHideShadow,\n      screenOrientation,\n      statusBarAnimation,\n      statusBarHidden,\n      statusBarStyle,\n      title,\n      titleColor:\n        (headerTitleStyle && headerTitleStyle.color) || headerTintColor,\n      titleFontFamily: headerTitleStyle && headerTitleStyle.fontFamily,\n      titleFontSize: headerTitleStyle && headerTitleStyle.fontSize,\n      titleFontWeight: headerTitleStyle && headerTitleStyle.fontWeight,\n      translucent: translucent === undefined ? false : translucent,\n    };\n\n    const hasHeader = headerMode !== 'none' && options.header !== null;\n    if (!hasHeader) {\n      return <ScreenStackHeaderConfig {...headerOptions} hidden />;\n    }\n\n    if (headerStyle !== undefined) {\n      headerOptions.backgroundColor = headerStyle.backgroundColor;\n      headerOptions.blurEffect = headerStyle.blurEffect;\n    }\n\n    const children = [];\n\n    if (options.backButtonImage) {\n      children.push(\n        <ScreenStackHeaderBackButtonImage\n          key=\"backImage\"\n          source={options.backButtonImage}\n        />\n      );\n    }\n\n    if (options.headerLeft !== undefined) {\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          {renderComponentOrThunk(options.headerLeft, { scene })}\n        </ScreenStackHeaderLeftView>\n      );\n    } else if (options.headerBackImage !== undefined) {\n      const goBack = () => {\n        // Go back on next tick because button ripple effect needs to happen on Android\n        requestAnimationFrame(() => {\n          descriptor.navigation.goBack(descriptor.key);\n        });\n      };\n\n      children.push(\n        <ScreenStackHeaderLeftView key=\"left\">\n          <HeaderBackButton\n            onPress={goBack}\n            pressColorAndroid={options.headerPressColorAndroid}\n            tintColor={options.headerTintColor}\n            backImage={options.headerBackImage}\n            title={options.backButtonTitle}\n            truncatedTitle={options.truncatedBackButtonTitle}\n            backTitleVisible={this.props.backTitleVisible}\n            titleStyle={options.headerBackTitleStyle}\n            layoutPreset={this.props.layoutPreset}\n            scene={scene}\n          />\n        </ScreenStackHeaderLeftView>\n      );\n    }\n\n    if (options.headerTitle) {\n      if (title === undefined && typeof options.headerTitle === 'string') {\n        headerOptions.title = options.headerTitle;\n      } else {\n        children.push(\n          <ScreenStackHeaderCenterView key=\"center\">\n            {renderComponentOrThunk(options.headerTitle, { scene })}\n          </ScreenStackHeaderCenterView>\n        );\n      }\n    }\n\n    if (options.headerRight) {\n      children.push(\n        <ScreenStackHeaderRightView key=\"right\">\n          {renderComponentOrThunk(options.headerRight, { scene })}\n        </ScreenStackHeaderRightView>\n      );\n    }\n\n    if (children.length > 0) {\n      headerOptions.children = children;\n    }\n\n    return <ScreenStackHeaderConfig {...headerOptions} />;\n  };\n\n  _renderScene = (index, route, descriptor) => {\n    const { navigation, getComponent, options } = descriptor;\n    const { mode, transparentCard } = this.props.navigationConfig;\n    const SceneComponent = getComponent();\n\n    let stackPresentation = 'push';\n    if (mode === 'modal' || mode === 'containedModal') {\n      stackPresentation = mode;\n      if (transparentCard || options.cardTransparent) {\n        stackPresentation =\n          mode === 'containedModal'\n            ? 'containedTransparentModal'\n            : 'transparentModal';\n      }\n    }\n\n    let stackAnimation = options.stackAnimation;\n    if (options.animationEnabled === false) {\n      stackAnimation = 'none';\n    }\n\n    const { screenProps } = this.props;\n    return (\n      <Screen\n        key={`screen_${route.key}`}\n        style={[StyleSheet.absoluteFill, options.cardStyle]}\n        stackAnimation={stackAnimation}\n        stackPresentation={stackPresentation}\n        replaceAnimation={\n          options.replaceAnimation === undefined\n            ? 'pop'\n            : options.replaceAnimation\n        }\n        pointerEvents={\n          index === this.props.navigation.state.routes.length - 1\n            ? 'auto'\n            : 'none'\n        }\n        gestureEnabled={\n          Platform.OS === 'android'\n            ? false\n            : options.gestureEnabled === undefined\n            ? true\n            : options.gestureEnabled\n        }\n        onAppear={() => this._onAppear(route, descriptor)}\n        onDismissed={() => this._removeScene(route)}>\n        {this._renderHeaderConfig(index, route, descriptor)}\n        <SceneView\n          screenProps={screenProps}\n          navigation={navigation}\n          component={SceneComponent}\n        />\n      </Screen>\n    );\n  };\n\n  render() {\n    const { navigation, descriptors } = this.props;\n\n    return (\n      <ScreenStack\n        style={styles.scenes}\n        onFinishTransitioning={this._onFinishTransitioning}>\n        {navigation.state.routes.map((route, i) =>\n          this._renderScene(i, route, descriptors[route.key])\n        )}\n      </ScreenStack>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  scenes: { flex: 1 },\n});\n\nfunction createStackNavigator(routeConfigMap, stackConfig = {}) {\n  const router = StackRouter(routeConfigMap, stackConfig);\n\n  // belowe we override getStateForAction method in order to add handling for\n  // a custom native stack navigation action. The action REMOVE that we want to\n  // add works in a similar way to POP, but it does not remove all the routes\n  // that sit on top of the removed route. For example if we have three routes\n  // [a,b,c] and call POP on b, then both b and c will go away. In case we\n  // call REMOVE on b, only b will be removed from the stack and the resulting\n  // state will be [a, c]\n  const superGetStateForAction = router.getStateForAction;\n  router.getStateForAction = (action, state) => {\n    if (action.type === REMOVE_ACTION) {\n      const { key, immediate } = action;\n      let backRouteIndex = state.index;\n      if (key) {\n        const backRoute = state.routes.find((route) => route.key === key);\n        backRouteIndex = state.routes.indexOf(backRoute);\n      }\n\n      if (backRouteIndex > 0) {\n        const newRoutes = [...state.routes];\n        newRoutes.splice(backRouteIndex, 1);\n        return {\n          ...state,\n          routes: newRoutes,\n          index: newRoutes.length - 1,\n          isTransitioning: immediate !== true,\n        };\n      }\n    }\n    return superGetStateForAction(action, state);\n  };\n  // Create a navigator with StackView as the view\n  return createNavigator(StackView, router, stackConfig);\n}\n\nexport default createStackNavigator;\n"]}