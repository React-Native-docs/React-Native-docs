{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerView","state","navigation","descriptors","lazy","drawerContent","props","drawerPosition","I18nManager","isRTL","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","detachInactiveScreens","loaded","setLoaded","React","useState","routes","index","key","dimensions","colors","isDrawerOpen","handleDrawerOpen","useCallback","dispatch","DrawerActions","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","emit","type","subscription","BackHandler","addEventListener","remove","focusedRouteKey","includes","renderNavigationView","progress","renderContent","styles","content","map","route","descriptor","unmountOnBlur","options","isFocused","header","headerShown","StyleSheet","absoluteFill","opacity","layout","scene","render","activeKey","gestureEnabled","swipeEnabled","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={detachInactiveScreens} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}