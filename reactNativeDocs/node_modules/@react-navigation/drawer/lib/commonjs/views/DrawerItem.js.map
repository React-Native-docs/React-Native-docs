{"version":3,"sources":["DrawerItem.tsx"],"names":["Touchable","children","style","onPress","to","accessibilityRole","delayPressIn","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","DrawerItem","props","colors","icon","label","labelStyle","focused","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","borderRadius","StyleSheet","flatten","color","backgroundColor","iconNode","size","container","wrapper","selected","marginLeft","marginVertical","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"mappings":";;;;;;;AAAA;;AACA;;AAUA;;AACA;;AACA;;;;;;;;;;AAqEA,MAAMA,SAAS,GAAG,CAAC;AACjBC,EAAAA,QADiB;AAEjBC,EAAAA,KAFiB;AAGjBC,EAAAA,OAHiB;AAIjBC,EAAAA,EAJiB;AAKjBC,EAAAA,iBALiB;AAMjBC,EAAAA,YANiB;AAOjB,KAAGC;AAPc,CAAD,KAYZ;AACJ,MAAIC,sBAASC,EAAT,KAAgB,KAAhB,IAAyBL,EAA7B,EAAiC;AAC/B;AACA;AACA,wBACE,oBAAC,YAAD,eACMG,IADN;AAEE,MAAA,EAAE,EAAEH,EAFN;AAGE,MAAA,KAAK,EAAE,CAACM,MAAM,CAACC,MAAR,EAAgBT,KAAhB,CAHT;AAIE,MAAA,OAAO,EAAGU,CAAD,IAAY;AACnB,YACE,EAAEA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACE,MAAf,IAAyBF,CAAC,CAACG,OAA3B,IAAsCH,CAAC,CAACI,QAA1C,OAAuD;AACtDJ,QAAAA,CAAC,CAACD,MAAF,IAAY,IAAZ,IAAoBC,CAAC,CAACD,MAAF,KAAa,CADlC,CADF,CAEuC;AAFvC,UAGE;AACAC,YAAAA,CAAC,CAACK,cAAF;AACAd,YAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAGS,CAAH,CAAP;AACD;AACF;AAZH,QAcGX,QAdH,CADF;AAkBD,GArBD,MAqBO;AACL,wBACE,oBAAC,sBAAD,eACMM,IADN;AAEE,MAAA,iBAAiB,EAAEF,iBAFrB;AAGE,MAAA,YAAY,EAAEC,YAHhB;AAIE,MAAA,OAAO,EAAEH;AAJX,qBAME,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAED;AAAb,OAAqBD,QAArB,CANF,CADF;AAUD;AACF,CA9CD;AAgDA;AACA;AACA;;;AACe,SAASiB,UAAT,CAAoBC,KAApB,EAAkC;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAa,uBAAnB;AAEA,QAAM;AACJC,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,UAHI;AAIJnB,IAAAA,EAJI;AAKJoB,IAAAA,OAAO,GAAG,KALN;AAMJC,IAAAA,eAAe,GAAGL,MAAM,CAACM,OANrB;AAOJC,IAAAA,iBAAiB,GAAG,oBAAMP,MAAM,CAACQ,IAAb,EAAmBC,KAAnB,CAAyB,IAAzB,EAA+BC,GAA/B,GAAqCC,MAArC,EAPhB;AAQJC,IAAAA,qBAAqB,GAAG,oBAAMP,eAAN,EAAuBI,KAAvB,CAA6B,IAA7B,EAAmCC,GAAnC,GAAyCC,MAAzC,EARpB;AASJE,IAAAA,uBAAuB,GAAG,aATtB;AAUJ/B,IAAAA,KAVI;AAWJC,IAAAA,OAXI;AAYJ+B,IAAAA,UAZI;AAaJC,IAAAA,YAbI;AAcJ,OAAG5B;AAdC,MAeFY,KAfJ;;AAiBA,QAAM;AAAEiB,IAAAA,YAAY,GAAG;AAAjB,MAAuBC,wBAAWC,OAAX,CAAmBpC,KAAK,IAAI,EAA5B,CAA7B;;AACA,QAAMqC,KAAK,GAAGf,OAAO,GAAGC,eAAH,GAAqBE,iBAA1C;AACA,QAAMa,eAAe,GAAGhB,OAAO,GAC3BQ,qBAD2B,GAE3BC,uBAFJ;AAIA,QAAMQ,QAAQ,GAAGpB,IAAI,GAAGA,IAAI,CAAC;AAAEqB,IAAAA,IAAI,EAAE,EAAR;AAAYlB,IAAAA,OAAZ;AAAqBe,IAAAA;AAArB,GAAD,CAAP,GAAwC,IAA7D;AAEA,sBACE,oBAAC,iBAAD;AACE,IAAA,WAAW,EAAE;AADf,KAEMhC,IAFN;AAGE,IAAA,KAAK,EAAE,CAACG,MAAM,CAACiC,SAAR,EAAmB;AAAEP,MAAAA,YAAF;AAAgBI,MAAAA;AAAhB,KAAnB,EAAsDtC,KAAtD;AAHT,mBAKE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAE,CADhB;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAE,CAACO,MAAM,CAACkC,OAAR,EAAiB;AAAER,MAAAA;AAAF,KAAjB,CAHT;AAIE,IAAA,mBAAmB,EAAEZ,OAAO,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAJ1D;AAKE,IAAA,0BAA0B,EAAC,QAL7B;AAME,IAAA,iBAAiB,EAAC,QANpB;AAOE,IAAA,kBAAkB,EAAE;AAAEqB,MAAAA,QAAQ,EAAErB;AAAZ,KAPtB,CAQE;AARF;AASE,IAAA,mBAAmB,EAAEA,OAAO,GAAG,CAAC,UAAD,CAAH,GAAkB,EAThD;AAUE,IAAA,UAAU,EAAEU,UAVd;AAWE,IAAA,YAAY,EAAEC,YAXhB;AAYE,IAAA,EAAE,EAAE/B;AAZN,kBAcE,oBAAC,KAAD,CAAO,QAAP,QACGqC,QADH,eAEE,oBAAC,iBAAD;AACE,IAAA,KAAK,EAAE,CACL/B,MAAM,CAACY,KADF,EAEL;AAAEwB,MAAAA,UAAU,EAAEL,QAAQ,GAAG,EAAH,GAAQ,CAA9B;AAAiCM,MAAAA,cAAc,EAAE;AAAjD,KAFK;AADT,KAMG,OAAOzB,KAAP,KAAiB,QAAjB,gBACC,oBAAC,iBAAD;AACE,IAAA,aAAa,EAAE,CADjB;AAEE,IAAA,KAAK,EAAE,CACL;AACEiB,MAAAA,KADF;AAEES,MAAAA,UAAU,EAAE;AAFd,KADK,EAKLzB,UALK;AAFT,KAUGD,KAVH,CADD,GAcCA,KAAK,CAAC;AAAEiB,IAAAA,KAAF;AAASf,IAAAA;AAAT,GAAD,CApBT,CAFF,CAdF,CALF,CADF;AAiDD;;AAED,MAAMd,MAAM,GAAG2B,wBAAWY,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,gBAAgB,EAAE,EADT;AAETH,IAAAA,cAAc,EAAE,CAFP;AAGTI,IAAAA,QAAQ,EAAE;AAHD,GADoB;AAM/BP,EAAAA,OAAO,EAAE;AACPQ,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,OAAO,EAAE;AAHF,GANsB;AAW/BhC,EAAAA,KAAK,EAAE;AACLiC,IAAAA,WAAW,EAAE,EADR;AAELC,IAAAA,IAAI,EAAE;AAFD,GAXwB;AAe/B7C,EAAAA,MAAM,EAAE;AACN8C,IAAAA,OAAO,EAAE;AADH;AAfuB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        // @ts-expect-error: keep for compatibility with older React Native versions\n        accessibilityStates={focused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]}