{"version":3,"sources":["Drawer.tsx"],"names":["Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","Animated","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","React","Component","e","open","onClose","props","key","interactionHandle","undefined","InteractionManager","clearInteractionHandle","createInteractionHandle","drawerStyle","dimensions","width","StyleSheet","flatten","endsWith","percentage","Number","replace","isFinite","drawerType","getDrawerWidth","GestureState","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","componentDidMount","Platform","OS","document","body","addEventListener","handleEscape","componentDidUpdate","prevProps","componentWillUnmount","removeEventListener","render","gestureEnabled","swipeEnabled","swipeEdgeWidth","sceneContainerStyle","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","flexDirection","content","transform","handleTapStateChange","handleDrawerLayout","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPosition: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled:\n      Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? ANIMATED_ZERO\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ||\n                Platform.OS === 'windows' ||\n                Platform.OS === 'macos' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]}