{"version":3,"sources":["Overlay.tsx"],"names":["React","Platform","StyleSheet","Animated","interpolate","interpolateDeprecated","interpolateNode","cond","greaterThan","PROGRESS_EPSILON","Overlay","forwardRef","progress","style","props","ref","animatedStyle","opacity","inputRange","OS","outputRange","zIndex","styles","overlay","overlayStyle","select","web","WebkitTapHighlightColor","default","create","absoluteFillObject","backgroundColor"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,OAAOC,QAAP,MAAqB,yBAArB;AAEA,MAAM;AACJC,EAAAA,WAAW,EAAEC,qBADT;AAEJ;AACAC,EAAAA,eAHI;AAIJC,EAAAA,IAJI;AAKJC,EAAAA;AALI,IAMFL,QANJ;AAQA,MAAMC,WAAyC,GAC7CE,eAD6C,aAC7CA,eAD6C,cAC7CA,eAD6C,GAC1BD,qBADrB;AAGA,MAAMI,gBAAgB,GAAG,IAAzB;AAMA,MAAMC,OAAO,gBAAGV,KAAK,CAACW,UAAN,CAAiB,SAASD,OAAT,CAC/B;AAAEE,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmB,KAAGC;AAAtB,CAD+B,EAE/BC,GAF+B,EAG/B;AACA,QAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEb,WAAW,CAACQ,QAAD,EAAW;AAC7B;AACA;AACA;AACA;AACAM,MAAAA,UAAU,EACRjB,QAAQ,CAACkB,EAAT,KAAgB,SAAhB,IAA6BlB,QAAQ,CAACkB,EAAT,KAAgB,OAA7C,GACI,CAAC,CAAD,EAAI,CAAJ,CADJ,GAEI,CAACV,gBAAD,EAAmB,CAAnB,CARuB;AAS7BW,MAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AATgB,KAAX,CADA;AAYpB;AACA;AACA;AACAC,IAAAA,MAAM,EAAEd,IAAI,CAACC,WAAW,CAACI,QAAD,EAAWH,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;AAfQ,GAAtB;AAkBA,sBACE,oBAAC,QAAD,CAAU,IAAV,eACMK,KADN;AAEE,IAAA,GAAG,EAAEC,GAFP;AAGE,IAAA,KAAK,EAAE,CAACO,MAAM,CAACC,OAAR,EAAiBC,YAAjB,EAA+BR,aAA/B,EAA8CH,KAA9C;AAHT,KADF;AAOD,CA7Be,CAAhB;AA+BA,MAAMW,YAAY,GAAGvB,QAAQ,CAACwB,MAAT,CAAwC;AAC3DC,EAAAA,GAAG,EAAE;AACH;AACA;AACAC,IAAAA,uBAAuB,EAAE;AAHtB,GADsD;AAM3DC,EAAAA,OAAO,EAAE;AANkD,CAAxC,CAArB;AASA,MAAMN,MAAM,GAAGpB,UAAU,CAAC2B,MAAX,CAAkB;AAC/BN,EAAAA,OAAO,EAAE,EACP,GAAGrB,UAAU,CAAC4B,kBADP;AAEPC,IAAAA,eAAe,EAAE;AAFV;AADsB,CAAlB,CAAf;AAOA,eAAerB,OAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  interpolate: interpolateDeprecated,\n  // @ts-expect-error: this property is only present in Reanimated 2\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateDeprecated =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    />\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n});\n\nexport default Overlay;\n"]}