{"version":3,"sources":["SceneView.tsx"],"names":["React","NavigationStateContext","StaticContainer","EnsureSingleNavigator","useOptionsGetters","SceneView","screen","route","navigation","routeState","getState","setState","options","navigatorKeyRef","useRef","getKey","useCallback","current","addOptionsGetter","key","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","name","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport type {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport useOptionsGetters from './useOptionsGetters';\nimport type { NavigationProp, RouteConfig, EventMapBase } from './types';\n\ntype Props<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  screen: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n}: Props<State, ScreenOptions, EventMap>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]}